# COMPARES lookout, stray AND HDoutliers on all datasets.
library(RWeka)
library(pROC)
library(DDoutlier)
library(psych)
library(airt)
library(apcluster)

source(file="Functions_For_Cluster.R")

args=(commandArgs(TRUE))

if(length(args)==0){
  print("No arguments supplied.")
  ##supply default values
  break;
  file_name = "Wilt_withoutdupl_02_v01.arff"
}else{
  file_name = args[1]
}

#----------------------------------------------------
# READ FILE AND PRE-PROCESSING
#----------------------------------------------------
data.folder <- "/mnt/lustre/projects/Mona0072/e103049/nlout/Data_Repository/To_GitHub/"
dat.o <- read.arff(paste(data.folder,file_name , sep=""))

# Remove duplicates
dat1 <- dat.o[!duplicated(dat.o), ]

X <- dat1[ ,-dim(dat1)[2]]
nn <- dim(dat1)[1]

labsori <- dat1[ ,dim(dat1)[2]]
labs <- rep(0, nn)
labs[labsori=="yes"] <- 1

X <- unitize(X)
kk <- max(ceiling(dim(X)[1]/10), 50)
# kk <- min(ceiling(dim(X)[1]/10), 50)

# DDoutlier scores
knnsc <- tryCatch(DDoutlier::KNN_AGG(X, k_min=kk, k_max=kk+10), error = function(e){
  print(sys.calls()) # , k_min=kk, k_max=kk+10
  knnsc <- rep(NA, nn)
  return(knnsc)})
# knnsc <- try(DDoutlier::KNN_AGG(X))
lofsc <- tryCatch(DDoutlier::LOF(X, k=kk), error = function(e){
  print(sys.calls())
  lofsc <- rep(NA, nn)
  return(lofsc)})
cofsc <- tryCatch(DDoutlier::COF(X, k=kk), error = function(e){
  print(sys.calls())
  cofsc <- rep(NA, nn)
  return(cofsc)})
inflosc <- tryCatch(DDoutlier::INFLO(X, k=kk), error = function(e){
  print(sys.calls())
  inflosc <- rep(NA, nn)
  return(inflosc)})
kdeossc <- tryCatch(DDoutlier::KDEOS(X, k_min=kk, k_max=kk+10), error = function(e){
  print(sys.calls())
  kdeossc <- rep(NA, nn)
  return(kdeossc)})
ldfsc <- tryCatch(DDoutlier::LDF(X, k=kk)$LDF, error = function(e){
  print(sys.calls())
  ldfsc <- rep(NA, nn)
  return(ldfsc)})
ldofsc <- tryCatch(DDoutlier::LDOF(X, k=kk), error = function(e){
  print(sys.calls())
  ldofsc <- rep(NA, nn)
  return(ldofsc)})

Y <- cbind(knnsc, lofsc, cofsc, inflosc, kdeossc, ldfsc, ldofsc)
na_cols <- which(apply(Y, 2, function(x) sum(is.na(x))) >0)
na_cols
if(length(na_cols)>0){
  Y<- Y[ ,-na_cols]
}

maxs <- apply(Y, 2, max)
mins <- apply(Y, 2, min)
divs <- maxs - mins
Y <- as.data.frame(Y)
Y <- sweep(Y, 2, mins)
Y <- sweep(Y, 2, divs, "/")

# Correlation values and eigen value ratio
coy <- cor(Y)
numones <- dim(coy)[1]
nineties <- sum(coy > 0.9) - numones
eighties <- sum(coy > 0.8) - numones
seventies <- sum(coy > 0.7) - numones
eigs <- eigen(coy)
eigratio <- eigs$value[1]/eigs$value[2]

# IRT Ensemble
modout <- IRTensemble(Y)
irt_ens_scores <- modout$thetas[ ,2]
roc_obj <- pROC::roc(labs, irt_ens_scores, direction = "<")
irt_ensemble <- roc_obj$auc

# IRT Ensemble 2
meths <- order(modout$model$param[ ,1], decreasing=TRUE)[1:3]
modout2 <- IRTensemble(Y[ ,meths])
irt_ens_scores <- modout2$thetas[ ,2]
roc_obj <- pROC::roc(labs, irt_ens_scores, direction = "<")
irt_ensemble2 <- roc_obj$auc

# Taking the mean
Ymean <- apply(Y, 1, mean)
roc_obj <- pROC::roc(labs, Ymean, direction = "<")
averages <- roc_obj$auc

# Greedy Ensemble - Schubert et al
gr_obj <- greedy_ensemble(Y, kk=1)
gr_score <- gr_obj$ens_score
roc_obj <- pROC::roc(labs, gr_score, direction = "<")
gr_ens <- roc_obj$auc

# Greedy Ensemble mean - Schubert et al
gr_score_one <- matrix(0, nrow=dim(Y)[1], ncol=10)
for(jj in 1:10){
  gr_obj <- greedy_ensemble(Y, kk=jj)
  gr_score_one[ ,jj] <- gr_obj$ens_score
}
gr_score_mean <- apply(gr_score_one, 1, mean)
roc_obj <- pROC::roc(labs, gr_score_mean, direction = "<")
gr_ens_mean <- roc_obj$auc


# ICWA Ensemble
icwa_score <- icwa_ensemble(Y)
roc_obj <- pROC::roc(labs, icwa_score, direction = "<")
icwa_ens <- roc_obj$auc

# MAX Ensemble
max_score <- max_ensemble(Y)
roc_obj <- pROC::roc(labs, max_score, direction = "<")
max_ens <- roc_obj$auc

# Threshold Ensemble
thres_score <- threshold_ensemble(Y)
roc_obj <- pROC::roc(labs, thres_score, direction = "<")
thres_ens <- roc_obj$auc

output <- cbind.data.frame(irt_ensemble, irt_ensemble2, averages, gr_ens,  gr_ens_mean, icwa_ens, max_ens, thres_ens, nineties, eighties, seventies, eigratio, dim(X)[1], dim(X)[2])
colnames(output) <- c("IRT", "IRT2", "Average", "Greedy", "GreedyMean", "ICWA", "Max", "Thres", "Cor90", "Cor80", "Cor70", "EigRatio", "N", "d")

#----------------------------------------------------
# WRITE OUTPUT
#----------------------------------------------------
write_folder <- "/mnt/lustre/projects/Mona0072/e103049/IRTensemble/Data_Output/EX1/TAKE_6/"
file_name2 <- tools::file_path_sans_ext(file_name)

write_file_name <- paste(write_folder, file_name2,  ".csv", sep="")
write.csv(output, write_file_name, row.names = FALSE )
